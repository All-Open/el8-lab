lab_desc="Configure system-wide Cryptographic Policies"

setup () {
    :
}

grade () {
    echo "check_FUTURE check_sshd_opt_out check_httpd_key_length check_httpd_restarts check_httpd_serves check_httpd_ciphers"
}

check_FUTURE_desc="FUTURE level should be enabled"
check_FUTURE () {
    update-crypto-policies --show | grep -q "FUTURE" && return 0

    return 1
}

check_sshd_opt_out_desc="SSH daemon configuration is excluded from system-wide crypto policies"
check_sshd_opt_out () {
    # umac-64-etm@openssh.com is too weak and disabled in future LEVEL
    ssh -vvv -o ConnectTimeout=20 -o StrictHostKeyChecking=no -o \
        BatchMode=yes localhost 2>&1 | grep -q "MACs.*umac-64-etm" && return 0

    return 1
}

check_httpd_key_length_desc="Certificate with 3072 key length or more was generated"
check_httpd_key_length () {
    RET=`openssl rsa -in /etc/pki/tls/private/localhost.key -noout -text 2>/dev/null | grep Private-Key | sed -e 's/^.*: (\([0-9]*\) bit.*$/\1/'`
    if [ -n "$RET" ] && [ "$RET" -eq "$RET" ] && [ $(( "$RET" > 3071)) ]
    then
        return 0
    fi

    return 1
}

check_httpd_restarts_desc="Restart httpd to confirm it works"
check_httpd_restarts () {
    systemctl restart httpd 2>/dev/null && return 0

    return 1
}

check_httpd_serves_desc="httpd serves content on :443"
check_httpd_serves () {
    curl -k https://localhost/ >/dev/null 2>/dev/null && return 0

    return 1
}

check_httpd_ciphers_desc="Use 128 bit AES cipher to confirm httpd follows FUTURE-level policy"
check_httpd_ciphers () {
    # AES128 is not supported in FUTURE
    # TLS 1.2 is used so we can use the same command for any crypto level:
    # * https://curl.haxx.se/docs/ssl-ciphers.html
    # * TLS 1.3 would require '--tls13-ciphers' flag
    curl -k https://localhost -v --tls-max 1.2 \
        --ciphers ECDHE-RSA-AES128-GCM-SHA256 >/dev/null 2>/dev/null || return 0

    return 1
}
